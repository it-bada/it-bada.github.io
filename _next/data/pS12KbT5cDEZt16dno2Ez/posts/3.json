{"pageProps":{"posts":[{"title":"비디오 게임 다시 한번 시도하기","description":"","date":"2024-05-27 20:03","slug":"2024-05-27-Givingvideogamesanothertry","content":"\n\n## 나의 취미 되찾기\n\n예전에는 매일 비디오 게임을 즐겼어요.\n\n어릴 적부터 취미로 삼아온 게이밍은 영원히 그럴 것이라고 생각해왔어요. 하지만 요즘에는 예전보다 게임을 덜 하게 되었어요. 조금 생각해보니, 플레이할 게임이 너무 많아져서 압박감을 느낀 것 같아요. 어릴 적이나 십대 때를 생각하면, 한 번에 두 달에 한 번 살 수 있는 게임을 고르는 선택이 더 의미가 있었죠. 선택을 한 뒤에 새 게임이 내게 바로 매혹적이지 않더라도, 여전히 공평하게 한번 기회를 주곤 했어요. 어쨌든 새 게임을 기다려야 했기 때문이죠.\n\n요즘에는 새 게임을 사면 그만큼 큰 헌터를 해야 할 필요가 없어졌어요. Steam을 이용해 두 시간 이내에 환불을 받을 수 있고, 게임 패스를 한 달 구독해서 400개가 넘는 게임을 즐기다가 마음에 드는 하나를 선택할 수 있어요. 처음에는 이것이 문득 보이지 않았지만, 이만큼 많은 게임이 있는 만큼 나에게 딱 맞는 게임을 플레이하지 못한다는 변명을 할 수 없다는 생각이 들어요. 어떤 의미로, 이 많은 옵션이 주어진데도 내가 완벽한 게임을 찾지 못한다면, 그건 내가 뭔가 부족한 것인 것 같다고 생각되요.\n\n<div class=\"content-ad\"></div>\n\n물론, 그게 바로 상황은 아닙니다. 어릴 때 경험한 대로, 어떤 게임은 다른 것들보다 내 마음을 사로잡는 데 더 많은 시간이 걸립니다. 때로는 제가 시스템을 마스터하거나 이야기에 더 익숙해질 때 매력을 느끼기도 합니다. 오늘날 다른 것을 쉽게 할 수 있는 편리함으로 인해 그것을 보기가 더 어려워졌단 걸 깨달았습니다. 여전히 많은 게임들에 쉽게 접근할 수 있다는 건 좋은 일이라고 생각하지만, 어떤 것에 헌신하기 위해서는 제게 더 큰 노력이 필요하다고 생각합니다.\n\n취미를 방치하기는 마음에 들지 않기 때문에, 어떻게 하면 그 열정을 되살릴 수 있을지 고민해왔습니다. 독서를 더 즐기기 위해 사용한 전략을 게임에 적용할 수 있다고 믿습니다. 이 전략은 다음과 같습니다. 먼저, 내 인생에서 한 번쯤은 플레이하고 싶은 10가지 게임을 선택합니다. 그 다음, 이 10가지 게임을 마치기 전까지 다른 것을 할 수 없도록 헌신할 것입니다.\n\n![image](sites/default/files/inline-images/2024-05-27-Givingvideogamesanothertry_0.png)\n\n이 목록이 바뀔 수 없기 때문에, 내가 플레이하고 싶은 게임에 대해 진지하게 생각해야 합니다. 동시에, 이 목록 외에는 다른 것을 할 필요가 없다는 것을 알아서 안심감을 느낄 수 있습니다. 현재 플레이하고 있는 게임이 마음에 들지 않는다면, 다른 선택지를 찾기 위해 수천 개의 옵션을 걱정할 필요가 없다는 것도 알 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이것이 제가 생각해 낸 목록입니다.\n\n- Ace Attorney: Trials and Tribulations\n- Guardians of the Galaxy\n- Super Mario Wonder\n- Kirby and the Forgotten Land.\n- Bayonetta 2\n- Paper Mario: The Thousand Year Door.\n- The Legend of Zelda Majora’s Mask.\n- Transistor\n- Sonic Frontiers\n- Senua’s Saga: Hellblade II\n\n이 목록은 제가 시작했지만 끝내지 못한 게임들, 친구들이 추천해 준 게임들, 그리고 내가 여러 해 동안 주시하고 있는 게임들을 섞어 놓은 것입니다. 이 모든 것들이 공통점으로 갖고 있는 것은 모두 싱글 플레이어 게임이며, \"끝\"이 있는 게임들이라는 점입니다. 크레딧이 롤될 때의 지점이 있는 것이니까요.\n\n어떤 면에서는 목록을 작성하고 약속하는 것이 어리석다고 생각합니다. 그것을 그렇게까지 심각하게 생각할 필요는 없다고 생각하는데요. \"그냥 플레이해\", 라고 내 머리 속에서 들립니다. 이전에는 잘 작동했지만, 오늘날에는 그렇게 간단하지 않다고 생각합니다. 나만 다른 사람이 되었을 뿐만 아니라 세상도 변했기 때문이죠. 매일 나는 정보 폭풍속에서 살아가고 있으며, 이는 취미를 포함한 내 삶의 모든 부분에 이르렀습니다. 나 자신에게 제한을 두는 것이 좋다고 생각합니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n아이로써 새로운 게임을 얻을 때 느꼈던 감정이 더 의미있어 보였던 것은 선택을 해야 했기 때문일지도 몰라요. 어쩌면 선택이 인생에 의미를 부여하는 것일지도 몰라요. 🌟","ogImage":{"url":"/assets/img/2024-05-27-Givingvideogamesanothertry_0.png"},"coverImage":"/assets/img/2024-05-27-Givingvideogamesanothertry_0.png","tag":["Tech"],"readingTime":3},{"title":"가상 현실 혁명 VR AI 빌더 소개","description":"","date":"2024-05-27 20:02","slug":"2024-05-27-RevolutioninVirtualRealityIntroducingVRAIBuilder","content":"\n\n가상 현실은 현대 기술 분야 중에서 가장 빠르게 성장하고 있는 분야 중 하나입니다. VR이 제공하는 무한한 가능성을 고려할 때 많은 기업들이 미래가 이 산업에 있다는 것을 깨닫고 있습니다. 이 추세는 메타와 같은 기술 거물들의 진입과 최근에 세계 최대 기업인 애플의 VR 분야 진출로 더욱 확증을 받고 있습니다. 그러나 현재는 VR 게임 및 애플리케이션을 개발하는 데 장벽이 여전히 매우 높습니다. 비용, 시간, 다양한 부서에서 특화된 팀이 필요하다는 점이 VR 애플리케이션 개발을 매우 어렵게 만들고 있습니다. 이것이 바로 저희의 혁신적인 도구인 VR AI Builder가 나오는 곳입니다.\n\n## VR 개발 장벽 극복하기\n\n오늘날 VR 게임 및 애플리케이션을 개발하는 것은 상당한 금전 투자, 시간 투자, 그리고 숙련된 전문가들로 이루어진 대규모 팀이 필요한 요구사항이 있는 어려운 과정입니다. 자세한 모델링, 상호작용 프로그래밍, 원활한 작동을 보장하기 위해 전문 모델러, 프로그래머, 디자이너 등의 작업이 필요합니다. VR 시장에 게임과 애플리케이션이 많이 없는 것은 놀라운 일이 아닙니다.\n\n<div class=\"content-ad\"></div>\n\n웹 개발이 진화한 것처럼이 프로세스를 간단하게 상상해보세요. 비싼 비용과 복잡한 작업이었던 웹 사이트 작성은 이제 템플릿과 간단한 도구 덕분에 누구에게나 몇 분만에 접근 가능해졌습니다. 우리의 VR AI Builder는 가상 현실 세계에 비슷한 혁명을 가져오려고 합니다.\n\n## VR AI Builder: 모두를 위한 혁명적인 도구\n\nVR AI Builder는 프로그래밍 기술이 있는지 없는지에 관계없이 누구나 자신만의 게임, 건물, 쇼룸, 상점 또는 다른 경험을 가상 현실에서 만들 수 있는 도구입니다. 이 도구는 VR 개발과 관련된 모든 장벽을 제거하도록 설계되었습니다. $VR 토큰과 가상 환경을 구축하고 수익을 창출할 수있는 VR 랜드 플롯이 있으면 됩니다.\n\n## 빠른 개발과 풍부한 사용자 콘텐츠\n\n<div class=\"content-ad\"></div>\n\nVR AI Builder는 가상 현실 애플리케이션의 개발 시간을 현저히 단축할 것입니다. 기업들은 모델러와 프로그래머들로 구성된 대규모 팀 고용할 필요가 없어질 것입니다. 그들은 자신들만의 VR 콘텐츠를 신속하고 효율적으로 만들 수 있는 도구를 사용할 수 있을 것입니다. 이 접근 방식은 시간과 비용을 절약할 뿐만 아니라 거대한 시장 요구에 신속히 대응할 수 있도록 해줍니다. 우리 플랫폼은 누구나 추가비용없이 VR에서 어떠한 것이든 만들 수 있는 장소가 될 것입니다.\n\n## Victoria VR: VR 세계의 Google — VR 시장을 지배하다\n\nVR에 대한 수요는 거대하며, Victoria VR이 1만 명의 직원을 가지고 있더라도 충족하지 못할 만큼입니다. 그래서 우리는 기업이 원하는 VR을 만드는 대신, 그들이 직접 만들 수 있는 도구를 구축하기로 결정했습니다. VR AI Builder를 통해, 모든 기업이 자신만의 가상 세계를 구축할 수 있는 플랫폼이 될 것입니다. 마치 Google이 모든 웹사이트에 접근할 수 있는 플랫폼인 것처럼 말이죠. VR AI Builder는 우리가 전체 VR 시장을 지배할 수 있는 진정한 혁명이라고 믿습니다. 이것은 우리를 3D 인터넷의 Google로 만들 것이며, MMORPG 게임과 함께 Ready Player One을 연상시키는 가상 세계가 될 것입니다.\n\n## VR AI Builder의 초기 액세스 기능\n\n<div class=\"content-ad\"></div>\n\n**VR AI Builder**의 전체 기능은 현재 일찍 액세스 가능하며 빌더 존으로 제한됩니다. 여기서 사용자는 저희가 만든 물체들의 선택에서 장면을 만들 수 있습니다. 이를 \"프리팹\"이라고 부르며, 빌더 존 어디에나 배치할 수 있으며 조정 가능한 격자 시스템 덕분에 쉽게 배치할 수 있습니다. 기능성과 원활한 경험을 보장하기 위해 VR 헤드셋 컨트롤러의 제한된 버튼 수와 완벽히 작동하도록 디자인했습니다. 간단하고 직관적인 인터페이스와 결합하여, VR AI Builder가 어떻게 작동하는지 이해하는 데 복잡한 학습이 필요하지 않습니다. 거의 누구나 몇 분 안에 익힐 수 있습니다.\n\n![Revolution in Virtual Reality Introducing VR AI Builder 1](/assets/img/2024-05-27-RevolutioninVirtualRealityIntroducingVRAIBuilder_1.png)\n\n![Revolution in Virtual Reality Introducing VR AI Builder 2](/assets/img/2024-05-27-RevolutioninVirtualRealityIntroducingVRAIBuilder_2.png)\n\n## OpenAI와의 통합\n\n<div class=\"content-ad\"></div>\n\n마무리로, OpenAI를 통합하기 위한 미래 계획을 더 자세히 살펴보겠습니다. 빅토리아 VR은 최초로 AI를 이처럼 고급 도구에 통합한 기업입니다. 오늘날 ChatGPT를 이용한 간단한 텍스트 명령으로 결과를 얻는 것이 매우 쉬워졌습니다. 따라서 VR AI Builder와 통합되었을 때 얼마나 강력하고 간단해질지 상상해보십시오. OpenAI뿐만 아니라, VR AI Builder는 출시된 모든 새로운 AI 기술을 통합할 수 있는 능력을 갖추고 있어 미래를 대비한 플랫폼입니다.\n\n## 결론\n\n가장 중요한 것은, 가상현실의 미래가 여기 있다는 점입니다. VR AI Builder와 함께 우리 각자가 이에 참여할 수 있습니다. 무한한 가능성과 경험을 함께 느껴보는 새로운 세계에 입장합시다.\n\n빅토리아 VR에 대한 자세한 내용은 www.victoriavr.com을 참조해 주세요.\n\n<div class=\"content-ad\"></div>\n\n**빅토리아 VR**은 혁신적인 블록체인 기반 가상현실 메타버스입니다. 언리얼 엔진으로 구동되며 현실적이고 상세한 그래픽을 특징으로 하며 대규모 멀티플레이어 온라인 롤플레잉 게임(MMORPG)과 독특한 소셜 경험 플레이그라운드를 결합합니다.\n\n플레이어들은 전례없이 가상현실 세계에 몰입할 것이며 디지털 생활을 즐길 수 있습니다. 게임을 즐기고, 디지털 부동산(VR 랜드)을 개발하고, 사업을 소유하거나 일하고, 또는 즐기고 싶은 콘텐츠를 찾아보세요. 상상력에만 한계가 있습니다.\n\n**Website** | **Twitter** | **Telegram** | **Discord** | **Instagram** | **Facebook** | **Youtube**","ogImage":{"url":"/assets/img/2024-05-27-RevolutioninVirtualRealityIntroducingVRAIBuilder_0.png"},"coverImage":"/assets/img/2024-05-27-RevolutioninVirtualRealityIntroducingVRAIBuilder_0.png","tag":["Tech"],"readingTime":4},{"title":"매스 이펙트 시리즈를 완주한 후의 여운","description":"","date":"2024-05-27 20:01","slug":"2024-05-27-TheAftermathofCompletingtheMassEffectSeries","content":"\n\n**업데이트:** 이 글 초고를 2022년 초에 썼어요. 이 글은 이 플랫폼에서(아니면 다른 어디서든) 첫 번째로 올라갈 글이었어요. 제가 완벽주의자라서 글을 올릴지 말지를 오래 고민하며 미뤄왔죠. 이전에 블로그를 한 적도 온라인 글을 쓴 적도 없어서 무엇을 기대해야 할지 몰라서였어요. 궁극적으로 자신에게 '그냥 해버리자'라고 말하며 글을 올렸어요. 2년이 걸렸지만, 다음에는 더 빨리할 거라고 믿어요.\n\n이번에는 PS4에 출시된 'Mass Effect' 전설 에디션으로 시리즈 전체를 순삭했어요. 그리고 완료한 후에 큰 공허감을 느끼고 있어요.\n\n시간을 많이 보낸 캐릭터들과 함께 한 전체 발전 여정, 그것이 갑자기 끝나버린 느낌이에요. 마치 그들이 실제로 존재하는 것처럼 알게 되는 사람들이에요. 그리고 게임이 끝나면, 그들의 '존재'도 함께 '소멸'된 것 같아요. 물론 언제든 다시 플레이할 수 있지만, 다시 시작하기 전에 이 '완료'의 '상실'을 '애도'해야 한다는 느낌이 들어요.\n\n제가 정말 긴 게임이나 굉장히 긴 TV 시리즈를 마칠 때마다 비슷한 감정을 경험했어요. 게임/드라마를 경험했던 기억을 통해 나아가요. 특정한 클립을 검색해 유튜브를 보면서, 그 순간을 다시 살아보고 그 감정을 느끼곤 해요.\n\n<div class=\"content-ad\"></div>\n\n니 게임 한 판으로 작업하는 게 있지 않나요? 너무 신기한데, 그게 실제로 존재하는 것 같아요.\n\n# 게임 작별\n\n내 기분을 잘 대변하는 것 같아서 이야기를 한파로 다시 시작했어요.\n\n가족 같아요. 다소 진부할 수 있지만, 내 기분을 잘 대변해요.\n\n이번에는 모든 미션을 올바른 순서대로 플레이하고, 모든 부가 퀘스트를 완료하며 모든 게 을 올바르게 해야겠다는 생각에 ME3 게임을 처음부터 다시 시작했어요.\n\n<div class=\"content-ad\"></div>\n\n저는 시체 거대 함대가 머리를 듯한 마지막 순간까지 Citadel DLC를 남기기로 했어요. 그래서 가능한 많은 사람들을 '사랑하는 파티'에 초대할 수 있었죠.\n\nReddit에서 반복해서 얘기한 대로, 서술적으로 Citadel DLC는 너무나 이상했습니다. 우리는 리퍼와 싸우기 위해 충분한 힘을 모으는 시간이 부족했는데, 저는 여기서 내리막길을 걸으면서 제 부하들, 과거와 현재를 포함한 모든 스쿼드 메이트들을 위한 파티를 열커니 말이죠. 이 사실은 여전하지만, 그래도 이 DLC에게 매우 감사해요. 이야기 흐름과 어울리지 않았더라도, '내리막길 캐논' 안에서 그냥 플롯 장치로 간주하고 그 과정을 즐겼기 때문이죠.\n\n![Citadel DLC](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_0.png)\n\n이전 게임의 모든 캐릭터들을 만나 이야기를 나누는 것은 정말 좋았어요. 옛 친구들과 만나는 느낌이었죠. 따뜻함이 있었고, 동료애가 느껴졌고, 생명력이 느껴졌어요. 이 캐릭터들이 소설 속에서만 존재하는데도, 강한 정서적 연결을 느낄 수 있다는 게 정말 이상한 일이죠.\n\n<div class=\"content-ad\"></div>\n\n![Link to the first image](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_1.png)\n\n다시 한 번 플레이하는 것은 분명히 즐거웠어요. 물론 처음과는 조금 다르겠지만 말이에요. 어떤 것을 기대할지, 어떻게 끝나는지 알고 있었으니까요. 그럼에도 불구하고, 이를 알고 있다는 것 자체로 특별한 순간들을 더욱 가치 있게 만들어줬어요. 더욱 주의 깊게 듣고, 더욱 주의 깊게 보았죠. 정말로 \"잠깐 멈춰 장미 향기 맡는\" 순간이었어요. 기분이 좋았어요.\n\n![Link to the second image](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_2.png)\n\n그것은 역사적인 순간이었어요, 게임의 맥락 속에서, 그리고 내 게임 경험 속에서도요.\n\n<div class=\"content-ad\"></div>\n\n이 사람들, 이 캐릭터들과 더 많은 시간을 보내고 싶지만, 이 것이 끝에 이르게 될 것을 알고 있습니다. 이러한 것들을 무한히 연장할 수는 없습니다. 이 순간들은 빠르게 지나가기에 아름다운 것입니다.\n\n이미 말했듯이, 특별한 순간들을 더 많이 보내게 되어서 감사했고, 이를 기록하기 위해 시간과 노력을 기울였습니다. 제 캡처 갤러리에 그 중 일부를 업로드했습니다. 대부분이 게임 내 샷이며, 가끔 컷씬은 아닙니다. 제 개인적으로는 게임 내 샷이 더 독특하고 개인적이라고 느껴지기 때문입니다. 여기에선 다른 관점에서 상상을 하며, 게임 속 일상적이면서도 특별하고 독특한 순간을 담아내고 있습니다.\n\n우리는 게임 속 많은 것들을 당연시하고, 저는 주로 간과되는 작은 것들에 대한 감사를 표현하고 싶었습니다. 정말로 작은 순간들이 전체 경험을 더해주는 것입니다.\n\n# 세월의 순간들\n\n<div class=\"content-ad\"></div>\n\n제가 삼부작 중 세 번째 게임에서 눈에 띄게 기억에 남는 몇 가지 순간들을 공유해드릴게요:\n\n- '우선순위: 팔라벤' 미션에서 우리가 리퍼의 힘의 진정한 규모를 처음 깨달았을 때\n\n![이미지](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_3.png)\n\n- '우선순위 투칸카'에서 젠토페이지를 치료하는 순간\n\n<div class=\"content-ad\"></div>\n\n![Image 1](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_4.png)\n\n- 노만디 다리에서 다음 목적지를 선택하기 전의 폭풍 속 조용함\n\n![Image 2](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_5.png)\n\n- ‘우선 란노크’에서 리퍼와 혼자 맞붙는 순간, 시리즈 전체에서 가장 좋아하는 미션 중 하나로 영원히 기억될 것이다. 순수한 극적 효과만이 아니라, 시리즈 이전 게임들에서의 빌드업도 함께하는 이유 때문에.\n\n<div class=\"content-ad\"></div>\n\n![Mass Effect Blog](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_6.png)\n\n- \"Does this unit have a soul?\"\n\n![Mass Effect Blog](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_7.png)\n\n- Stunning visuals in 'Priority: Thessia'\n\n<div class=\"content-ad\"></div>\n\n![2024-05-27-TheAftermathofCompletingtheMassEffectSeries_8.png](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_8.png)\n\n- 그리고 물론, 'Earth의 우선순위'에서의 역사적인 최후 전투\n\n![2024-05-27-TheAftermathofCompletingtheMassEffectSeries_9.png](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_9.png)\n\n- 내 부대, 최고의 부대\n\n<div class=\"content-ad\"></div>\n\n![2024-05-27-TheAftermathofCompletingtheMassEffectSeries_10](/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_10.png)","ogImage":{"url":"/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_0.png"},"coverImage":"/assets/img/2024-05-27-TheAftermathofCompletingtheMassEffectSeries_0.png","tag":["Tech"],"readingTime":4},{"title":"위 스포츠 - 닌텐도를 구한 게임","description":"","date":"2024-05-27 19:59","slug":"2024-05-27-WiiSports-TheGameThatSavedNintendo","content":"\n![Wii Sports](/assets/img/2024-05-27-WiiSports-TheGameThatSavedNintendo_0.png)\n\nWii Sports is one of those games that everyone has played once or has at least heard of. I can guarantee that if you walk up to anyone on the street and ask, “Do you know what Wii Sports is”, they will most likely say yes.\n\nIt’s really hard to believe that Wii Sports is 6 months away from being legal. I still remember going to my grandma’s house and versing her in tennis, baseball, and our favorite, bowling.\n\nWii Sports is most known for being the game that put the Nintendo Wii on the map. Everyone and their mother bought a Wii at this time because the console and Wii Sports were marketed as “anyone can pick up and play”.\n\n<div class=\"content-ad\"></div>\n\n**왜 \"Wii Sports\"가 대단한 게임인지 - 그 이유들**\n\n\"위 스포츠\"는 테니스, 야구, 볼링, 골프, 복싱 등 5가지 종목으로 이루어진 게임 모음집이에요. 이 게임은 새로운 컨트롤러인 Wii-Remote와 그 움직임 인식 기능을 활용하여 야구 방망이를 휘두르거나 테니스 라켓을 휘두르는 모션을 모방해요. 이 게임은 어린 아이나 할아버지, 할머니도 쉽게 이해하고 즐길 수 있도록 제작되었답니다.\n\n말할 것도 없이 \"Wii Sports\"는 엄청난 성공을 거뒀어요. 이것은 Wii의 베스트셀러 게임이자 역대 4위로 판매량이 기록되었어요. 그리고 이것이 Wii가 1억 163만 대를 팔게 만들었으며, 전체적인 판매량으로는 7위를 차지하는 주된 원인 중 하나라고 해요.\n\n이 게임이 게임 세계에 미친 영향은 상상할 수 없을 만큼 컸어요. 이것은 움직임 제어의 문화적 현상을 시작시켰죠. 또한 닌텐도가 운동을 포함하는 게임을 오랜 시간 동안 만들게 된 계기도 되었어요. 물론 Wii Sports를 플레이해도 실제 스포츠를 하는 것에 대체같은 건 아니지만, 노인이나 정말로 운동하기에는 어린 분들에겐 이것이 좋은 대안이 되어줄 거예요.\n\n이 게임을 많이 사랑하는 이유가 여러 가지 있지만, 저에게 가장 좋은 점은 NPC로 알려진 미('Mii') 캐릭터들이에요.\n\n<div class=\"content-ad\"></div>\n\n지금 몇 분을 소개해 드리도록 할게요. Mii라는 것을 아시는 분들도 있고 아시지 못하는 분들도 있을 텐데요. Mii는 닌텐도가 그들의 메인 \"Wii\" 게임에 아바타로 사용한 것이에요. 게임에서 대결하는 NPC들이죠. 게다가 해당 게임에 Mii 채널 애플리케이션을 사용하여 당신만의 Mii를 만들 수 있어요. 당신의 Wii 콘솔 홈 화면에서 이용할 수 있답니다. 제가 제 가족들 같은 사람들을 닮은 Miis를 만드는 데 많은 시간을 보냈고, 제가 좋아하는 연예인과 배우들을 닮은 Miis도 만들었어요. 가능성은 무한해요.\n\n이 시점까지 닌텐도는 게임 산업에서 힘든 시기를 겪고 있었어요. 그들의 마지막 두 대형 콘솔은 대실패했고 Playstation과 Xbox가 닌텐도의 끝을 앗아갈 것으로 보였어요. 저는 닌텐도가 그 이후에 휴대용 콘솔에 집중했을 거라고 확신해요.\n\nWii Sports는 2006년 발매된 것으로 인해 게임 산업을 영원히 바꿨어요. 오랜 기간 동안 그만두지 못했던 재미를 다시 가져왔지요.\n\n이 게임은 아직도 가장 생생한 게임 기억을 간직하고 있어요. 2013년 햇살 가득한 오후에 할머니와 함께 한 경험을 절대로 잊지 못할 것이고, 2024년 현재에 이르러서도 햇살 가득한 아침에 제 남동생과 함께 즐기고 있어요. 무슨 게임으로 가장 즐거운 시간을 보냈느냐고 물어본다면, 제 대답은 Wii Sports라고 할 거에요.\n\n<div class=\"content-ad\"></div>\n\n이 게임은 시대를 초월한 작품으로, 닌텐도를 진정으로 구해 주었습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-WiiSports-TheGameThatSavedNintendo_0.png"},"coverImage":"/assets/img/2024-05-27-WiiSports-TheGameThatSavedNintendo_0.png","tag":["Tech"],"readingTime":3},{"title":"RACA 로열티 상환 암호화폐가 새로운 인기와 거래량을 기록하고 있습니다","description":"","date":"2024-05-27 19:58","slug":"2024-05-27-RACAReachesNewLevelsofPopularityandTradingVolume","content":"\n\n![RACA ecosystem](/assets/img/2024-05-27-RACAReachesNewLevelsofPopularityandTradingVolume_0.png)\n\n안녕하세요! 🌟 RACA 생태계가 암호화폐 시장에서 낙관주의가 회복되면서 인상적인 성장을 보여주고 있어요. 소셜 미디어에서 RACA에 대한 언급이 급증하고 거래량도 증가하고 있답니다.\n\n@CryptoInsightsX에 따르면 RACA는 최근 BNB 체인 암호화폐 중에서 가장 많이 언급된 프로젝트 중 하나로, 17만 1천 건 이상의 언급을 받았고, 현재 가장 화제를 모으고 있는 암호화폐 프로젝트 중 하나로 자리잡았어요.\n\n더 많은 정보는 [여기](https://twitter.com/RACA_3/status/1791526361758130278)에서 확인할 수 있어요. 💫\n\n<div class=\"content-ad\"></div>\n\n인기 있는 소셜 미디어 플랫폼에서 눈에 띄었던 RACA는 최근 가장 활발히 거래된 메타버스 프로젝트 중 하나로 떠올랐습니다. 8.73백만 달러 이상의 거래량을 기록한 RACA는 메타버스 공간에서 선두 주자로 자리매김하며 투자자와 암호화폐 애호가들의 관심을 사로잡았습니다.\n\nRACA의 최근 시장 성과와 인기 상승은 커뮤니티와 함께 진행되는 우리의 제품 및 서비스에 기인하여 Web3와 메타버스의 모든 잠재력을 발휘하는 것을 가능케 하고 있음을 시사합니다.\n\nDWF Labs, OKX Blockdream Ventures, 그리고 Consensys Mesh의 Tachyon 가속기의 지원을 받은 RACA는 웹 3.0 인프라 솔루션 공급업체로 활동하고 있습니다. 메이 머스크 NFT와 함께 입찰 토큰으로 처음 출시된 RACA는 이제 강력한 웹3.0 게임 생태계로 진화했습니다!\n\nRACA, 미국 심볼화된 네이티브 토큰,은 '일론 머스크의 어머니 & 코다 NFT' 커뮤니티가 시작한 AI 앱 및 게임의 암호화폐 'dApp Store'로 활용되고 있습니다.","ogImage":{"url":"/assets/img/2024-05-27-RACAReachesNewLevelsofPopularityandTradingVolume_0.png"},"coverImage":"/assets/img/2024-05-27-RACAReachesNewLevelsofPopularityandTradingVolume_0.png","tag":["Tech"],"readingTime":1},{"title":"윌 레비스의 유출된 트위터 인기 동영상","description":"","date":"2024-05-27 19:57","slug":"2024-05-27-WillLevisLeakedTrendingVideoonTwitter","content":"\n![Will Levis trending video](/assets/img/2024-05-27-WillLevisLeakedTrendingVideoonTwitter_0.png)\n\n소셜 미디어의 끊임없는 변화 속에서 화제를 빠르고 넓게 사로잡는 것은 바이럴 동영상뿐입니다. 최근 이 현상의 중심에 서 있는 인물은 미식 축구 세계의 떠오르는 스타인 윌 레비스입니다.\n\n## `` 전체 동영상 보러가기 👈👈\n\n최근 레비스를 주인공으로 한 동영상이 트위터를 뜨겁게 달궜으며, 널리 논의되고, 미디어의 주목을 받고 있습니다. 이곳에서는 이 동영상의 내용, 영향 및 레비스와 디지털 세계에 대한 보다 넓은 함의를 탐험해 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 윌 레비스가 누구인가요?\n\n비디오의 구체적인 내용을 파헤치기에 앞서, 윌 레비스가 누구인지를 이해하는 것이 중요합니다. 윌 레비스는 켄터키 와일드캣스팀과 NFL 입문으로 유명한 프로미넌트한 퀼터백입니다. 그의 운동 능력과 매력적인 존재감은 대학생 및 프로 풋볼계에서 주목할 만한 인물로 만들었습니다. 대학에서의 스타에서 NFL 유망주로의 여정은 팬들과 분석가들에 의해 밀접히 지켜지고 있습니다.\n\n## [전체 비디오 보러가기 👈👈](링크)\n\n## 광풍을 일으킨 비디오\n\n<div class=\"content-ad\"></div>\n\n해당 비디오는 2024년 5월 말 트위터에 처음 등장했습니다. 이 비디오는 리비스가 현장 이외의 순간에 찍힌 것을 보여주며, 관람자들의 상상력을 담당하는 일상적인 활동에 참여했습니다. 비디오의 버전과 맥락에 따라 활동의 구체적인 내용은 달라지지만, 리비스의 공감 가능하고 쾌활한 태도가 공통적입니다.\n\n비디오의 한 인기 버전에는 리비스가 자신이 좋아하는 간식의 독특한 혼합물을 색다른 방식으로 준비하는 모습이 보입니다. 이는 관람자들 사이에서 웃음과 호기심을 자아내고 있습니다. 또 다른 버전은 팀 동료와의 재미있는 상호작용을 강조하여 리비스의 장난스러운 성격을 보여줍니다. 이런 순간들의 진실성과 자발성은 청중들과 깊게 공감하며 이 비디오의 빠른 확산에 기여했습니다.\n\n![Levis Video](/assets/img/2024-05-27-WillLevisLeakedTrendingVideoonTwitter_1.png)\n\n## 왜 바이럴이 되었을까요?\n\n<div class=\"content-ad\"></div>\n\n윌 레비스 비디오의 바이럴 현상에는 여러 요인이 기여합니다:\n\n- 공감 대상: 시청자들은 레비스의 어느 쪽이 아닌 인간적인 모습과 연결되며, 그의 운동 선수적 이미지 너머의 면을 볼 수 있습니다.\n- 유머: 비디오의 경쾌한 콘텐츠는 종종 진지한 스포츠 미디어의 분위기에서 상쾌한 휴식을 제공합니다.\n- 참여: 레비스의 확고한 팬층이 비디오를 열광적으로 공유하고 댓글을 달며 그 확산을 촉진합니다.\n- 언론 보도: 뉴스 매체와 스포츠 해설가들이 신속히 트렌드에 반응하여 그 인기를 더욱 키웁니다.\n\n이러한 요소들의 상호작용은 바이럴 현상을 이끌어내어 간단한 클립을 대중적인 소셜 미디어 이벤트로 변모시킵니다.\n\n<div class=\"content-ad\"></div>\n\n### 윌 레비스의 공개 이미지에 대한 다각적인 영향을 살펴보겠습니다:\n\n![2024-05-27-WillLevisLeakedTrendingVideoonTwitter_2.png](/assets/img/2024-05-27-WillLevisLeakedTrendingVideoonTwitter_2.png)\n\n- **인간화**: 이 동영상의 거친 성격은 레비스를 더 관련성 있는 빛으로 보여줌으로써, 일상적인 상황에서 스포츠 영웅들을 보는 것을 감사히 여기는 팬들에게 호감을 줍니다.\n- **인기 상승**: 이 바이럴 순간은 레비스를 더 넓은 관객들에게 소개함으로써, 일반적으로 축구를 따르지 않는 사람들을 포함합니다.\n- **마케팅 기회**: 브랜드와 스폰서들은 레비스의 확장된 가시성에 자본을 투자할 가능성이 높아져, 잠재적인 후원과 협업 기회로 이어질 것입니다.\n\n## 현대 스폸츠에서 소셜 미디어의 힘\n\n<div class=\"content-ad\"></div>\n\n윌 리비스의 트렌드 영상은 운동 선수들의 경력과 대중 인식을 형성하는 데 소셜 미디어의 엄청난 힘을 강조합니다. 트위터와 같은 플랫폼은 선수들과 팬들 간의 직접적인 상호 작용을 가능케 하며, 공동체 의식과 즉각성을 육성합니다. 바이럴 콘텐츠는 선수들을 주목받게 하여 참여와 수익 창출에 대한 새로운 길을 엽니다.\n\n## 결론\n\n트위터에서의 윌 리비스의 트렌드하는 영상은 단지 인터넷에서 일시적인 감각에 그치지 않습니다. 이것은 디지털 시대에 유명세의 변화하는 역학을 증명하는 것입니다. 소셜 미디어가 스포츠 산업에 영향을 미치는 가운데, 이러한 순간들은 진정성, 부합성 및 참여의 중요성을 부각시킵니다. 윌 리비스에게 이 바이럴 현상은 그의 공개적인 프로필을 높이는 것뿐만 아니라 초연결된 세계에서의 선수-팬 상호 작용의 미래를 엿볼 수 있는 기회를 제공합니다.\n\n가루가 식고 난 뒤에도 하나 분명한 것은 윌 리비스가 한 가지 단순한 순간을 상징하는 중요한 문화적 수표로 재능 있게 활용했으며, 한 대의 바이럴 비디오의 예측 불허하며 변혁적인 힘을 모두에게 상기시킨다는 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-27-WillLevisLeakedTrendingVideoonTwitter_0.png"},"coverImage":"/assets/img/2024-05-27-WillLevisLeakedTrendingVideoonTwitter_0.png","tag":["Tech"],"readingTime":3},{"title":"많은 돈을 벌기 위해 매일 TikTok에서 이것을 해보세요","description":"","date":"2024-05-27 19:56","slug":"2024-05-27-DoThisDailyOnTikTokToMakeALotOfMoney","content":"\n\n## 매일 TikTok에서 수입을 많이 올리는 방법 — 모든 사람들이 지켜보는 듯 춤을 추세요.\n\n![image](/assets/img/2024-05-27-DoThisDailyOnTikTokToMakeALotOfMoney_0.png)\n\nTikTok은 길가에 화제의 잠재력과 디지털적인 명성이 촉매된 현대적인 황금 러시 타운과 같습니다.\n\nTikTok에서 많은 돈을 벌려면 매일의 루틴을 콘텐츠 제작 공장으로 변환해야 합니다. 이런 방법을 따릅니다.\n\n<div class=\"content-ad\"></div>\n\n## 일정한 주기로 글을 올리세요:\n\n틱톡에서의 일정한 활동은 타마고치를 키우는 것과 같습니다. 소확행을 놓치지 않도록 하세요. 그렇지 않으면 당신의 참여도는 연못 속으로 떨어지는 돌처럼 빠르게 감소할 것입니다.\n\n매일 최적의 시간에 글을 올려서 귀하의 청중을 계속해서 흥미롭게 만들고 더 많은 사람들이 당신의 페이지로 돌아오게 하세요. 각각의 글은 복권 티켓과 같습니다. 더 자주 글을 올릴수록 잭팟을 터트릴 기회가 더 많아집니다.\n\n## 청중과 소통하세요:\n\n<div class=\"content-ad\"></div>\n\n**틱톡은 상호 교류하는 길이에요. 당신의 팔로워들은 수동적인 시청자가 아닙니다. 댓글에 응답하고 트렌드에 참여하며, 다른 사용자와 듀엣이나 스티칭을 만들어 보세요.**\n\n**파티를 주최하는 것과 같다고 생각해보세요: 구석에 서서 혼자 중얼거리는 일은 없겠죠.**\n\n**생동감 있고 상호 작용적으로, 커뮤니티를 형성하세요. 관객이 더 많이 참여할수록, 브랜드들에게 인플루언서로서 더 유혹적일 거예요.**\n\n## 퀄리티 컨텐츠 만들기:\n\n<div class=\"content-ad\"></div>\n\n틱톡은 짧고 강렬한 비디오로 유명하지만 퀄리티는 여전히 중요해요. 좋은 조명과 선명한 오디오, 정교한 편집을 활용하세요. 여러분의 콘텐츠는 반짝이는 페튼트 레더 구두만큼 세련되어야 해요.\n\n즐겁게 보거나 교육적이거나 영감을 주는 콘텐츠를 만들어보세요. 어떤 경향을 가지고 있든, 잘하세요. 고품질 콘텐츠는 팔로워들과 잠재적인 수익 창출 기회들을 자석처럼 끌어들이게 돼요.\n\n## 창의적으로 수익 창출하기:\n\n틱톡 크리에이터 펀드 이외에도, 브랜드 파트너십, 스폰서 콘텐츠, 상품들을 탐험해보세요. 틱톡 존재감을 비즈니스처럼 다뤄보세요. 여러분의 가치와 관객들과 잘 어울리는 브랜드들과 협업해보세요.\n\n<div class=\"content-ad\"></div>\n\n당신의 팔로워들이 사랑할 머천다이즈를 만드세요. 수익원을 다양화하여 틱톡에서 안정적인 현금 흐름을 확보하세요, 마치 잘 가꾸어진 시냇물처럼.\n\n이 일상적인 실천법을 따르면 곧 \"바이럴 센세이션\"이라고 말하는 것보다 빨리 틱톡에서 돈을 벌 수 있을 거에요.","ogImage":{"url":"/assets/img/2024-05-27-DoThisDailyOnTikTokToMakeALotOfMoney_0.png"},"coverImage":"/assets/img/2024-05-27-DoThisDailyOnTikTokToMakeALotOfMoney_0.png","tag":["Tech"],"readingTime":2},{"title":"인공지능 PC 이해하기  컴퓨팅의 미래","description":"","date":"2024-05-27 19:55","slug":"2024-05-27-UnderstandingAIPCsTheFutureofComputing","content":"\n\n![AI Art](/assets/img/2024-05-27-UnderstandingAIPCsTheFutureofComputing_0.png)\n\n알고 계시다시피, 우리가 아는 세상은 인공지능(AI)에 의해 변화되고 있습니다. 이는 비즈니스, 교육, 의료 및 엔터테인먼트를 포함한 사회의 많은 측면에 영향을 미치고 있습니다.\n\n이 혁명의 중심에는 인공지능 컴퓨터가 있습니다. 이는 인공지능 응용 프로그램에서 복잡한 작업을 수행하기 위해 설계된 맞춤형 개인 컴퓨터입니다.\n\n그렇다면 AI 컴퓨터란 무엇이며 전통적인 컴퓨터와 어떻게 다를까요? 어떤 혜택을 제공하며 우리의 삶을 어떻게 변화시키는 걸까요? 이 블로그에서는 이러한 문제와 Microsoft의 새로운 Copilot + PC와 같은 최신 개발 사항을 살펴보겠습니다. AI를 갖춘 컴퓨터의 훌륭한 세계와 미래에 미치는 영향에 대해 배워보세요.\n\n<div class=\"content-ad\"></div>\n\n# AI PC란 무엇인가요?\n\nAI 컴퓨터란 최신 하드웨어와 소프트웨어가 장착된 특수한 컴퓨터를 말합니다. 이 컴퓨터는 AI 관련 기능을 효율적으로 관리하는 데 사용됩니다.\n\n전통적인 개인용 컴퓨터와 달리, AI 컴퓨터는 방대한 양의 데이터를 처리하고 머신러닝 알고리즘을 실행하며 복잡한 계산을 수행할 수 있도록 설계되어 있습니다. 이들은 인공지능 연구, 딥러닝, 데이터 과학과 같은 분야에서 널리 사용됩니다.\n\n# AI PC 사용의 장점\n\n<div class=\"content-ad\"></div>\n\n**AI 컴퓨터의 우수성** \n\n- 뛰어난 성능: AI 컴퓨터는 강력한 CPU와 고급 GPU를 갖추어 AI 작업의 성능을 크게 향상시킵니다.\n- 빠른 데이터 처리: 빠른 저장 솔루션과 상당량의 RAM 덕분에 AI 컴퓨터는 거대한 데이터를 신속하게 처리할 수 있습니다.\n- 높은 효율성: AI 알고리즘 실행에 필요한 시간과 처리 능력을 줄여 더 효율적으로 운영할 수 있습니다.\n- 연구개발 향상: AI 컴퓨터는 빠른 AI 모델 구축과 평가의 반복을 용이하게 하여 창의성을 촉진합니다.\n\n## AI PC가 세상을 어떻게 변화시킬까요?\n\n- 의료 발전: AI가 탑재된 컴퓨터는 더 정확한 진단 도구와 환자 결과 향상을 위한 맞춤형 치료 프로그램을 도와줄 수 있습니다.\n- 더 나은 교육: AI는 각 학생에 맞게 교육과정을 맞춤화하여 접근성과 효과성을 높일 수 있습니다.\n- 환경 해결책: AI가 탑재된 컴퓨터는 방대한 환경 데이터를 평가하여 지속가능성을 지원하고 기후 변화에 대항할 수 있습니다.\n- 비즈니스 혁신: 기업은 공급망을 최적화하고 시장 트렌드를 예측하며 챗봇 기반 고객 서비스를 개선하는 등 모든 것에 AI를 활용할 수 있습니다.\n\n## AI PC와 다른 PC와의 차이점 \n\n<div class=\"content-ad\"></div>\n\n- 프로세서: AI 컴퓨터는 주로 AMD EPYC이나 Intel Xeon과 같이, 요구되는 복잡한 컴퓨팅 작업을 위해 설계된 고급 프로세서를 사용합니다.\n- GPU: 이들은 NVIDIA Tesla나 AMD Radeon Instinct와 같이, 병렬 처리를 위한 강력한 그래픽 처리를 갖추고 있습니다.\n- 메모리와 저장 공간: AI 컴퓨터는 보통 더 빠른 저장 옵션(예: NVMe SSD)과 더 많은 RAM을 가지고 있어 거대한 데이터 세트를 효율적으로 처리할 수 있습니다.\n- 소프트웨어 전문화: 이들은 PyTorch와 TensorFlow와 같은 AI 전용 소프트웨어 프레임워크를 사용하며, 이는 일반적으로 주류 컴퓨터에서 찾아보기 어렵습니다.\n\n# 최신 소식: 마이크로소프트의 Copilot + PC\n\n마이크로소프트가 최근 AI 기반 보조 프로그램인 Copilot과 함께 작동하도록 설계된 프리미엄 AI PC인 Copilot + PC를 발표했습니다.\n\n여기에 그 의미에 대해 종합적으로 설명하고 있습니다:\n\n<div class=\"content-ad\"></div>\n\n**통합된 인공지능 비서:** 마이크로소프트의 CoPilot + PC 통합 능력 덕분에 다양한 작업에 활용할 수 있어요. 글쓰기, 프레젠테이션 제작, 데이터 분석 등은 모두 자연어 지시를 통해 이용됩니다.\n\n**강력한 하드웨어:** 최신 AMD 또는 인텔 프로세서와 고급 GPU로 장착된 Copilot + PC는 무거운 AI 작업을 쉽게 처리할 수 있어요.\n\n**생산성 향상을 위해:** Copilot가 운영 체제의 일부가 되었으므로 사용자들은 더욱 효율적인 업무 흐름을 기대할 수 있어요. 예를 들어, Copilot는 스마트한 권장 사항을 제공하거나 지루한 작업을 자동화하며 회의 중 실시간 지원도 제공할 수 있어요.\n\n**강화된 보안:** 마이크로소프트는 Copilot + PC에서 강력한 보안을 강조하여 모든 AI 프로세스가 엄격한 개인 정보 보호 지침을 준수하도록 보장했어요. 민감한 데이터를 처리하는 기업과 개인들에게 필수적입니다.\n\n**Copilot + PC의 영향**\n\n- **생산성 향상:** Copilot + PC는 반복적인 작업을 자동화하고 지적인 통찰을 제공함으로써 개인 및 전문가용에서 생산성을 크게 향상시킬 수 있어요.\n- **사용 편의성:** IT 커뮤니티 외부에 강력한 AI 기법을 공개함으로써, AI를 민주화시킬 수 있어요. AI를 더 많은 혁신과 수용을 장려할 수 있습니다.\n- **일의 미래:** AI 비서들을 PC에 통합하는 것은 일의 미래를 엿보는 것입니다. AI가 인간의 능력을 향상시키며 일을 더 효율적이고 지루하지 않게 만드는 모습입니다.\n\n![UnderstandingAIPCsTheFutureofComputing_1.png](/assets/img/2024-05-27-UnderstandingAIPCsTheFutureofComputing_1.png)\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nAI 컴퓨터는 비즈니스, 교육, 건강 관리, 환경 보존을 포함한 여러 측면의 존재에 변화를 일으킬 수 있는 잠재력이 있습니다. Microsoft의 Copilot + PC와 같은 혁신들 덕분에 강력한 AI 기술이 모두에게 이용 가능해지면서 AI가 일상적인 컴퓨터 사용에 더욱 원활하게 통합되고 있습니다. 이는 산업 부문에서의 새로운 아이디어와 진보를 도약시킬 뿐만 아니라 산출량을 증가시킬 것입니다.\n\nAI 개인 컴퓨터의 능력을 이해하고 활용함으로써, 스마트하고 더욱 효율적인 세상을 조성하는 AI의 전체 잠재력에 대해 더 나은 준비가 가능할 것입니다.\n\nLinkedIn 팔로우 부탁드립니다.\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*OBAJEpu9Izgs6ThKjUvTeA.gif)","ogImage":{"url":"/assets/img/2024-05-27-UnderstandingAIPCsTheFutureofComputing_0.png"},"coverImage":"/assets/img/2024-05-27-UnderstandingAIPCsTheFutureofComputing_0.png","tag":["Tech"],"readingTime":4},{"title":"공간 컴퓨팅은 역겨워요메타Meta도 그렇죠","description":"","date":"2024-05-27 19:54","slug":"2024-05-27-SpatialComputingisCringeSoisMeta","content":"\n\n![Spatial Computing](/assets/img/2024-05-27-SpatialComputingisCringeSoisMeta_0.png)\n\n안녕하세요, 타로 전문가 여러분! \n\n스페이셜 컴퓨팅, 메타, 그리고 대부분의 VR/AR 조합이 많은 사람들에게 매력적이지 않은 이유는 기본적으로 모든 사람을 염두에 두고 설계되지 않았기 때문입니다. 이들은 종종 보다 광범위한 대중과 공감하지 못하는 방향으로 나아갑니다. 제가 말하는 게 뭔지 알아요? 바로 그거죠. 스페이셜 컴퓨팅은 새로운 세대의 컴퓨팅을 위한 것이에요. 문제는 아직 옛날의 패러다임에 고수하는 이들에 의해 만들어졌다는 점입니다. 현재 기술을 만든 사람들은 자신들이 만든 창작물이 진화하는 것을 꺼리는 것 같습니다.\n\n스마트폰과 개인 컴퓨터의 애호가들, iPad가 컴퓨터인지에 대해 논의하는 분들도 스페이셜 컴퓨팅의 발전에 영향을 미치고 있습니다. 이게 바로 나쁜 것은 아니라고 생각해요. \n\n스페이셜 컴퓨팅은 지적인 사람들에 의해 새로운 세대를 위해 만들어진 것입니다.\n\n<div class=\"content-ad\"></div>\n\n혁신과 새로운 패러다임 수용에 대한 의지가 필요합니다. 우리는 참신한 컴퓨팅 현실 플랫폼을 만들기 위해 자원을 투자할 용의가 있는 유일한 비전있는 사람이 필요합니다. 저는 이러한 비전을 실현할 수 있는 기술 거물로는 마이크로소프트, 구글, 인텔 또는 심지어 애플과 같은 회사를 바랐었습니다. 메타도 괜찮았을텐데요, 심지어 하드웨어 플랫폼 개발에 상당한 투자를 하는 퀄컴도 고전하고 있는 것 같습니다.\n\n저는 '공간적 현실(Spatial Reality)'이 미래이라고 굳게 믿고 있지만, 아직 그곳에 도달하지 못했습니다. 왜냐하면 기술 거물들이 산만한 방식으로 행동하고 작은 이동하는 대상을 겨냥하는 것 때문입니다.\n\n우리는 150도 시야각을 갖춘 8K 디스플레이, 고대비의 완전투명 스크린을 원합니다. 제가 아는 사람이 있을지도 모르겠네요...\n\n우리는 아름다운 형태 요소, 미니멀한 실현 가능한 무선 솔루션, 그리고 하루 종일 사용할 수 있는 배터리 수명을 간절히 원합니다. 이러한 진보가 지금이 필요합니다!\n\n<div class=\"content-ad\"></div>\n\n우리는 모두를 위한 접근성 기능과 더 똑똑한 대화형 AI를 필요로 합니다. 이를 AR 게임, 가상 애완동물, Spatial Emojis(Smojii)와 통합시키는데, 필요한 모든 맥락 데이터를 제공해주고 싶습니다. 젊어지고 있는데...\n\nT-Mobile 구독 패키지에 포함시켜서 한 번에 $4000를 내지 않아도 될 수 있게 해주세요. 많은 사람들에게는 부담이 큰 금액이죠. 6G 네트워크/하드웨어 가입을 통해 비용을 상쇄시켜 주시고, 새로운 현실에 대해 준비하겠습니다. $99에 판매해주세요.\n\n진정한 혁신과 변화의 순간을 선사해주세요. 망설이지 마세요.\n\n아이폰이 성공한 이유는 무엇일까요? 기술적으로 뛰어난 것이라기보다는 그 외에 모든 것을 갖췄기 때문입니다. 스티브 잡스, AT&T, 강력한 마케팅 머신, 그리고 우리와 같은 사람들이 있었죠. 그 당시에는 전화기로서 비쌌지만, 연구 및 개발, 제조, 유통, 그리고 확장된 마케팅 비용을 상쇄하기 위해 혜택을 받았습니다. 세상을 변화시키려면, 우주에 소인을 남기기 위해서는 이런 노력이 필요한 거죠.\n\n<div class=\"content-ad\"></div>\n\n안녕! 바이! 조만간 다시 만나요!","ogImage":{"url":"/assets/img/2024-05-27-SpatialComputingisCringeSoisMeta_0.png"},"coverImage":"/assets/img/2024-05-27-SpatialComputingisCringeSoisMeta_0.png","tag":["Tech"],"readingTime":2},{"title":"Go언어에서 확장 가능한 워커 풀을 구축하는 방법을 단계별로 안내하는 Concurrent Processing 마스터하기","description":"","date":"2024-05-27 19:52","slug":"2024-05-27-MasteringConcurrentProcessingAStep-by-StepGuidetoBuildingaScalableWorkerPoolinGo","content":"\n**10,000개의 요청을 초당 처리해요!**\n\n🤝 LinkedIn에서 저와 연결해요. 확장 가능한 시스템을 만들어봐요.\n\n이 블로그 포스트에서는 Go를 사용하여 확장 가능한 워커 풀을 구축해볼 거에요. 이 구현은 요청의 대량을 처리하기 위해 워커 풀을 효율적으로 관리하며, 부하에 따라 워커 수를 동적으로 확장합니다. 잠재적인 함정에 대해 논하고, 그것들을 피하는 방법에 대해 알아볼 거에요.\n\n# 개요\n\n<div class=\"content-ad\"></div>\n\n우리는 다음과 같은 기능을 갖춘 작업자 풀을 생성할 것입니다:\n\n- 부하에 따라 작업자 수를 동적으로 조절합니다.\n- 요청을 타임아웃 및 재시도 메커니즘으로 처리합니다.\n- 작업자를 우아하게 종료합니다.\n\n다음은 완전한 코드와 각 부분에 대한 설명 및 문서화가 제공됩니다.\n\n![Mastering Concurrent Processing: A Step-by-Step Guide to Building a Scalable Worker Pool in Go](/assets/img/2024-05-27-MasteringConcurrentProcessingAStep-by-StepGuidetoBuildingaScalableWorkerPoolinGo_0.png)\n\n<div class=\"content-ad\"></div>\n\n# 디스패처\n\n디스패처는 작업자를 관리하고 들어오는 요청을 분배하는 역할을 합니다. 현재 부하에 따라 동적으로 작업자를 추가하거나 제거하며 모든 작업자들을 원활하게 종료합니다.\n\n- AddWorker: 풀에 새 작업자를 추가하고 작업자 수를 증가시킵니다. 작업자는 요청 처리를 시작하기 위해 실행됩니다.\n- RemoveWorker: 최소 필요한 작업자보다 많은 경우 풀에서 작업자를 제거합니다. 작업자는 stopCh 채널을 통해 중지되도록 신호를 보냅니다.\n- ScaleWorkers: 부하에 따라 작업자 수를 동적으로 조정합니다. 부하가 임계값을 초과하고 최대 허용 작업자보다 작은 경우 새 작업자가 추가됩니다. 부하가 임계값 아래이고 최소 필요한 작업자보다 많은 경우 작업자가 제거됩니다.\n- LaunchWorker: 작업자를 시작하고 작업자 수를 증가시킵니다. 일반적으로 초기 작업자 세트에 사용됩니다.\n- MakeRequest: 입력 채널에 요청을 추가합니다. 채널이 가득 찬 경우 요청은 삭제되고 메시지가 기록됩니다.\n- Stop: 모든 작업자를 원활하게 중지합니다. 모든 작업자가 현재 요청 처리를 완료할 때까지 기다립니다. 제한 시간에 도달하면 모든 작업자를 강제로 중지합니다.\n\n# 작업자\n\n<div class=\"content-ad\"></div>\n\n**Worker 구조체는 요청을 처리하는 작업자를 나타냅니다. 각 작업자는 자신만의 고루틴에서 실행되며 채널에서 수신된 들어오는 요청을 청취합니다.**\n\n- **LaunchWorker**: 작업자를 별도의 고루틴으로 실행합니다. 작업자는 입력 채널이 닫히거나 정지 신호를 받을 때까지 들어오는 요청을 처리합니다.\n- **processRequest**: 개별 요청을 처리합니다. 에러가 발생하거나 요청 시간이 초과되었을 경우 최대 지정된 재시도 횟수까지 요청을 다시 시도합니다.\n\n**코드**\n\n```go\n// struct.go\n\npackage workerpool\n\nimport \"time\"\n\n// Request는 작업자에 의해 처리될 요청을 나타냅니다.\ntype Request struct {\n    Handler    RequestHandler\n    Type       int\n    Data       interface{}\n    Timeout    time.Duration // 요청의 제한 시간\n    Retries    int           // 재시도 횟수\n    MaxRetries int           // 최대 재시도 횟수\n}\n\n// RequestHandler는 요청을 처리하는 함수 유형을 정의합니다.\ntype RequestHandler func(interface{}) error\n```\n\n<div class=\"content-ad\"></div>\n\n\n### interface.go\n\n```go\npackage workerpool\n\nimport \"context\"\n\n// WorkerLauncher는 워커를 실행하기 위한 인터페이스입니다.\ntype WorkerLauncher interface {\n LaunchWorker(in chan Request, stopCh chan struct{})\n}\n\n// Dispatcher는 워커 풀을 관리하기 위한 인터페이스입니다.\ntype Dispatcher interface {\n AddWorker(w WorkerLauncher)\n RemoveWorker(minWorkers int)\n LaunchWorker(id int, w WorkerLauncher)\n ScaleWorkers(minWorkers, maxWorkers, loadThreshold int)\n MakeRequest(Request)\n Stop(ctx context.Context)\n}\n```\n\n### worker.go\n\n```go\npackage workerpool\n\nimport (\n \"context\"\n \"fmt\"\n \"sync\"\n \"time\"\n)\n\n// Worker는 요청을 처리하는 워커를 나타냅니다.\ntype Worker struct {\n Id         int\n Wg         *sync.WaitGroup\n ReqHandler map[int]RequestHandler\n}\n\n// LaunchWorker는 워커를 실행하여 들어오는 요청을 처리합니다.\n// 이는 별도의 고루틴에서 실행되며, 입력 채널에서 들어오는 요청을 지속적으로 수신합니다.\n// 워커는 입력 채널이 닫히거나 중지 신호를 받으면 정상적으로 종료됩니다.\nfunc (w *Worker) LaunchWorker(in chan Request, stopCh chan struct{}) {\n go func() {\n  defer w.Wg.Done()\n  for {\n   select {\n   case msg, open := <-in:\n    if !open {\n     // 채널이 닫히면 처리를 중지하고 반환합니다.\n     fmt.Println(\"워커 중지:\", w.Id)\n     return\n    }\n    w.processRequest(msg)\n    time.Sleep(1 * time.Microsecond) // 밀리초 단위의 작은 지연\n   case <-stopCh:\n    fmt.Println(\"워커 중지:\", w.Id)\n    return\n   }\n  }\n }()\n}\n\n// processRequest는 하나의 요청을 처리합니다.\nfunc (w *Worker) processRequest(msg Request) {\n fmt.Printf(\"워커 %d가 요청 처리 중: %v\\n\", w.Id, msg)\n var handler RequestHandler\n var ok bool\n if handler, ok = w.ReqHandler[msg.Type]; !ok {\n  fmt.Println(\"핸들러가 구현되지 않았습니다: 워커ID:\", w.Id)\n } else {\n  if msg.Timeout == 0 {\n   msg.Timeout = time.Duration(10 * time.Millisecond) // 기본 타임아웃\n  }\n  for attempt := 0; attempt <= msg.MaxRetries; attempt++ {\n   var err error\n   done := make(chan struct{})\n   ctx, cancel := context.WithTimeout(context.Background(), msg.Timeout)\n   defer cancel()\n\n   go func() {\n    err = handler(msg.Data)\n    close(done)\n   }()\n\n   select {\n   case <-done:\n    if err == nil {\n     return // 성공적으로 처리\n    }\n    fmt.Printf(\"워커 %d: 요청 처리 중 오류: %v\\n\", w.Id, err)\n   case <-ctx.Done():\n    fmt.Printf(\"워커 %d: 요청 처리 시간 초과: %v\\n\", w.Id, msg.Data)\n   }\n   fmt.Printf(\"워커 %d: 요청 %v에 대한 재시도 %d\\n\", w.Id, attempt, msg.Data)\n  }\n  fmt.Printf(\"워커 %d: %d번 재시도 후 요청 %v 처리 실패\\n\", w.Id, msg.MaxRetries, msg.Data)\n }\n}\n```\n\n### dispatcher.go\n\n```go\npackage workerpool\n\nimport (\n \"context\"\n \"fmt\"\n \"sync\"\n \"time\"\n)\n\n// ReqHandler는 요청 타입별로 매핑된 핸들러 맵입니다.\nvar ReqHandler = map[int]RequestHandler{\n 1: func(data interface{}) error {\n  return nil\n },\n}\n\n// dispatcher는 워커 풀을 관리하고 들어오는 요청을 워커들 사이에 분배하는 역할을 합니다.\ntype dispatcher struct {\n inCh        chan Request\n wg          *sync.WaitGroup\n mu          sync.Mutex\n workerCount int\n stopCh      chan struct{} // 워커에 중지 신호를 보내기 위한 채널\n}\n\n// AddWorker는 새로운 워커를 풀에 추가하고 워커 수를 증가시킵니다.\nfunc (d *dispatcher) AddWorker(w WorkerLauncher) {\n d.mu.Lock()\n defer d.mu.Unlock()\n d.workerCount++\n d.wg.Add(1)\n w.LaunchWorker(d.inCh, d.stopCh)\n}\n\n// RemoveWorker는 워커 수가 minWorkers보다 큰 경우 워커를 풀에서 제거합니다.\nfunc (d *dispatcher) RemoveWorker(minWorkers int) {\n d.mu.Lock()\n defer d.mu.Unlock()\n if d.workerCount > minWorkers {\n  d.workerCount--\n  d.stopCh <- struct{}{} // 워커에 중지 신호 전송\n }\n}\n\n// ScaleWorkers는 현재 부하에 따라 워커 수를 동적으로 조정합니다.\nfunc (d *dispatcher) ScaleWorkers(minWorkers, maxWorkers, loadThreshold int) {\n ticker := time.NewTicker(time.Microsecond)\n defer ticker.Stop()\n\n for range ticker.C {\n  load := len(d.inCh) // 현재 부하는 채널에 대기 중인 요청 수\n  if load > loadThreshold && d.workerCount < maxWorkers {\n   fmt.Println(\"스케일링 트리거\")\n   newWorker := &Worker{\n    Wg:         d.wg,\n    Id:         d.workerCount,\n    ReqHandler: ReqHandler,\n   }\n   d.AddWorker(newWorker)\n  } else if load < 0.75*loadThreshold && d.workerCount > minWorkers {\n   fmt.Println(\"축소 트리거\")\n   d.RemoveWorker(minWorkers)\n  }\n }\n}\n\n// LaunchWorker는 워커를 시작하고 워커 수를 증가시킵니다.\nfunc (d *dispatcher) LaunchWorker(id int, w WorkerLauncher) {\n w.LaunchWorker(d.inCh, d.stopCh) // 중지 채널을 워커에 전달\n d.mu.Lock()\n d.workerCount++\n d.mu.Unlock()\n}\n\n// MakeRequest는 요청을 입력 채널에 추가하거나 채널이 가득 찬 경우 삭제합니다.\nfunc (d *dispatcher) MakeRequest(r Request) {\n select {\n case d.inCh <- r:\n default:\n  // 채널이 가득 찬 경우 처리\n  fmt.Println(\"요청 채널이 가득 찼습니다. 요청 삭제됨.\")\n  // 다른 조치를 취하기 전에 로깅, 요청 버퍼링 또는 다른 조치를 취할 수 있습니다.\n }\n}\n\n// Stop는 모든 워커를 정상적으로 종료하고 처리가 완료될 때까지 기다립니다.\nfunc (d *dispatcher) Stop(ctx context.Context) {\n fmt.Println(\"\\n중지 호출됨\")\n close(d.inCh) // 더 이상 요청을 보내지 않음을 알리기 위해 입력 채널 닫기\n done := make(chan struct{})\n\n go func() {\n  d.wg.Wait() // 모든 워커가 종료될 때까지 대기\n  close(done)\n }()\n\n select {\n case <-done:\n  fmt.Println(\"모든 워커가 정상적으로 중지됨\")\n case <-ctx.Done():\n  fmt.Println(\"시간 초과, 강제 종료\")\n  // 시간 초과 시 모든 워커 강제 종료\n  for i := 0; i < d.workerCount; i++ {\n   d.stopCh <- struct{}{}\n  }\n }\n\n d.wg.Wait()\n}\n\n// NewDispatcher는 버퍼링된 채널과 웨이트 그룹이 있는 새로운 디스패처를 생성합니다.\nfunc NewDispatcher(b int, wg *sync.WaitGroup, maxWorkers int) Dispatcher {\n return &dispatcher{\n  inCh:   make(chan Request, b),\n  wg:     wg,\n  stopCh: make(chan struct{}, maxWorkers), // 블로킹을 방지하기 위한 버퍼링된 채널\n }\n}\n```\n\n### main.go\n\n```go\npackage main\n\nimport (\n \"context\"\n \"fmt\"\n \"runtime\"\n \"sync\"\n \"time\"\n wp \"workerpool/workerpool\"\n)\n\n\n\n<div class=\"content-ad\"></div>\n\n# 메인\n\n주요 기능은 디스패처와 워커를 초기화하고 작업을 보내며, 디스패처를 원활하게 종료합니다.\n\n- GOMAXPROCS를 사용 가능한 CPU 수로 설정합니다.\n- 디스패처를 초기화하고 초기 워커 집합을 시작합니다.\n- 디스패처에 요청을 보냅니다.\n- 타임아웃을 설정하여 디스패처를 원활하게 종료합니다.\n\n우리는 컨텍스트 타임아웃, 버퍼 크기, 최소/최대 워커와 같은 매개변수를 조정하여 초당 요청(RPS)을 최대화하고 애플리케이션 성능을 향상시킬 것입니다.\n\n<div class=\"content-ad\"></div>\n\nStay tuned for practical insights and real-world examples!\n\nIf you've read up till now, I hope you enjoyed this article. If you did, please show your support by giving it a clap, as it helps me stay motivated to assist the community.\n\nFeel free to leave a comment if you noticed any discrepancies in this article or if you have any questions related to the content.\n\nThank you for your time.\n\n<div class=\"content-ad\"></div>\n\n마음에 드시는 사람들과 언제든 연락하세요! LinkedIn에 연결해보는 건 어떠세요? 🤝\n```\n","ogImage":{"url":"/assets/img/2024-05-27-MasteringConcurrentProcessingAStep-by-StepGuidetoBuildingaScalableWorkerPoolinGo_0.png"},"coverImage":"/assets/img/2024-05-27-MasteringConcurrentProcessingAStep-by-StepGuidetoBuildingaScalableWorkerPoolinGo_0.png","tag":["Tech"],"readingTime":8}],"page":"3","totalPageCount":17,"totalPageGroupCount":1,"lastPageGroup":17,"currentPageGroup":0},"__N_SSG":true}