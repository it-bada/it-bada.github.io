{"pageProps":{"post":{"title":"아마존 면접에는 SQL 코딩 질문이 10개 있어요","description":"","date":"2024-05-18 22:59","slug":"2024-05-18-10SQLCodingQuestionsinAmazonInterviews","content":"\nData Analyst나 Data Scientist로 취직하고 싶다면 SQL에서의 강력한 기술력이 필요합니다. 인터뷰에서는 후보자들의 문제 해결 능력과 SQL 능력을 시험하는 복잡한 SQL 코딩 문제가 종종 제시됩니다. 이 글에서는 MySQL을 사용하여 아마존의 인터뷰에서 자주 나오는 일반적인 SQL 질문들을 코드 예제와 결과와 함께 살펴보겠습니다.\n\n![image](/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png)\n\n## 1. 두 번째로 높은 급여 찾기\n\n직원 테이블에서 두 번째로 높은 급여를 찾는 것은 자주 나오는 질문 중 하나입니다. 서브쿼리를 사용하여 다음과 같이 수행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n**질문:**\n\n```sql\nSELECT MAX(salary) AS SecondHighestSalary\nFROM employees\nWHERE salary < (SELECT MAX(salary) FROM employees);\n```\n\n**결과:**\n\n```sql\n| SecondHighestSalary|\n|--------------------|\n| 70000              |\n```\n\n이 쿼리는 결과 세트에서 최대 급여를 제외하여 두 번째로 높은 급여를 찾습니다.\n\n<div class=\"content-ad\"></div>\n\n## 2. 평균 이상 급여를 받는 직원 찾기\n\n또 다른 흔한 질문은 평균 급여보다 높은 급여를 받는 직원을 찾는 것입니다.\n\n```js\nSELECT name, salary\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees);\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```md\n이 쿼리는 각 직원의 급여를 평균 급여와 비교하여 평균 이상을 받는 사람을 찾습니다.\n\n## 3. 직원 계층\n\n아마존은 직원 계층을 찾는 것과 같은 계층적 데이터에 관한 질문을 할 수 있습니다. 재귀 CTE를 사용하여 직원 계층을 찾을 수 있습니다:\n```\n\n<div class=\"content-ad\"></div>\n\n\n원들의EmployeeHierarchy\n\n아래 결과와 같이 전체 직원 계층을 가져오는 재귀 CTE입니다.\n\n| id | name    | manager_id |\n|----|---------|------------|\n| 1  | John    | NULL       |\n| 2  | Alice   | 1          |\n| 3  | Bob     | 1          |\n| 4  | Carol   | 2          |\n| 5  | Dave    | 2          |\n\n\n<div class=\"content-ad\"></div>\n\n## 4. 부서별 최고 급여\n\n각 부서별 최고 급여를 찾는 것은 또 다른 흥미로운 문제입니다:\n\n```sql\nSELECT department, MAX(salary) AS HighestSalary\nFROM employees\nGROUP BY department;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```plaintext\n\n```\n\n+-------------+---------------+\n| department | HighestSalary |\n+-------------+---------------+\n| Engineering | 90000 |\n| HR | 80000 |\n| Sales | 75000 |\n+-------------+---------------+\n\n\n\n이 쿼리는 부서별로 직원을 그룹화하고 각 부서의 최고 급여를 찾습니다.\n\n## 5. 연속 결근자 식별\n\n출석 기록에 대해 연이어 결근한 직원을 식별해야 할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\nWITH ConsecutiveAbsences AS (\n    SELECT id,\n           date,\n           LAG(date, 1) OVER (PARTITION BY id ORDER BY date) AS previous_date\n    FROM attendance\n    WHERE status = 'absent'\n)\nSELECT id, date\nFROM ConsecutiveAbsences\nWHERE DATEDIFF(date, previous_date) = 1;\n\n\nResult:\n\n\n| id | date       |\n|----|------------|\n| 3  | 2024-05-10 |\n| 3  | 2024-05-11 |\n\n\nThis query finds employees who were absent on consecutive days by comparing each absence date with the previous one.\n\n<div class=\"content-ad\"></div>\n\n## 6. 러닝 토탈 계산하기\n\n아마존 면접에는 러닝 토탈을 계산하는 질문이 포함될 수 있어요:\n\n```sql\nSELECT date, sales,\n       SUM(sales) OVER (ORDER BY date) AS running_total\nFROM sales;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```sql\n+------------+-------+--------------+\n| 날짜       | 매출  | 누적합계      |\n+------------+-------+--------------+\n| 2024-05-01 | 100   | 100          |\n| 2024-05-02 | 200   | 300          |\n| 2024-05-03 | 150   | 450          |\n+------------+-------+--------------+\n```\n\n이 쿼리는 시간에 따른 매출의 누적 합계를 계산합니다.\n\n## 7. 구매를 한 번도 하지 않은 고객\n\n구매를 한 번도 하지 않은 고객을 찾기 위해 LEFT JOIN을 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n바로 보라 카드모래 예술로나와 함께합니다! ✨\n\n```sql\nSELECT c.id, c.name\nFROM customers c\nLEFT JOIN orders o ON c.id = o.customer_id\nWHERE o.id IS NULL;\n```\n\n결과:\n\n```sql\n+----+--------+\n| id | name   |\n+----+--------+\n| 4  | Dave   |\n+----+--------+\n```\n\n이 쿼리는 주문 내역이 하나도 없는 고객을 찾아냅니다. 🌟\n\n<div class=\"content-ad\"></div>\n\n## 8. 중복 레코드 식별\n\n당신에게 테이블에서 중복 레코드를 식별하라는 요청을 받을 수 있습니다:\n\n```sql\nSELECT name, email, COUNT(*)\nFROM users\nGROUP BY name, email\nHAVING COUNT(*) > 1;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n이 쿼리는 중복된 이름과 이메일 조합을 가진 사용자를 식별합니다.\n\n## 9. 카테고리별 상위 N개 레코드\n\n카테고리별 상위 N개 레코드를 찾는 것은 일반적인 고급 SQL 질문입니다:\n\n<div class=\"content-ad\"></div>\n\n```sql\nWITH RankedSales AS (\n    SELECT product, category, sales,\n           ROW_NUMBER() OVER (PARTITION BY category ORDER BY sales DESC) AS rank\n    FROM sales\n)\nSELECT product, category, sales\nFROM RankedSales\nWHERE rank <= 3;\n```\n\nResult:\n\n```sql\n| product | category    | sales |\n|---------|-------------|-------|\n| A       | Electronics | 1000  |\n| B       | Electronics | 800   |\n| C       | Electronics | 600   |\n| D       | Furniture   | 900   |\n| E       | Furniture   | 850   |\n| F       | Furniture   | 800   |\n```\n\nThis query finds the top 3 products in each category based on sales.\n\n<div class=\"content-ad\"></div>\n\n## 10. 월간 성장률\n\n월간 성장률을 계산하려면 윈도우 함수를 사용해야 합니다:\n\n```js\nSELECT month, sales,\n       sales - LAG(sales, 1) OVER (ORDER BY month) AS growth\nFROM monthly_sales;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n+-------+-------+--------+\n| 월 | 매출 | 성장률 |\n+-------+-------+--------+\n| 1월 | 1000 | NULL |\n| 2월 | 1100 | 100 |\n| 3월 | 1200 | 100 |\n+-------+-------+--------+\n\n이 쿼리는 매출의 월간 성장률을 계산합니다.\n\n## 결론\n\n아마존 면접 준비에는 고급 SQL 개념을 이해하고 복잡한 비즈니스 문제를 해결할 수 있는 능력이 필요합니다. 이러한 SQL 코딩 문제를 숙달하고 실제 데이터로 연습함으로써, 면접관들을 감명시키고 아마존에서 꿈에 그리던 직장을 확보할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# SQL 기초\n\n당신의 시간과 관심에 감사드립니다! 🚀\n더 많은 콘텐츠는 SQL 기초에서 찾아볼 수 있어요! 💫\n\n\n\n\n","ogImage":{"url":"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png"},"coverImage":"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Data Analyst나 Data Scientist로 취직하고 싶다면 SQL에서의 강력한 기술력이 필요합니다. 인터뷰에서는 후보자들의 문제 해결 능력과 SQL 능력을 시험하는 복잡한 SQL 코딩 문제가 종종 제시됩니다. 이 글에서는 MySQL을 사용하여 아마존의 인터뷰에서 자주 나오는 일반적인 SQL 질문들을 코드 예제와 결과와 함께 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 두 번째로 높은 급여 찾기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"직원 테이블에서 두 번째로 높은 급여를 찾는 것은 자주 나오는 질문 중 하나입니다. 서브쿼리를 사용하여 다음과 같이 수행할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"질문:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"MAX\"\n        }), \"(salary) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" SecondHighestSalary\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" employees\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WHERE\"\n        }), \" salary \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"<\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"MAX\"\n        }), \"(salary) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" employees);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"결과:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" SecondHighestSalary\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"--------------------|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"70000\"\n        }), \"              \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 결과 세트에서 최대 급여를 제외하여 두 번째로 높은 급여를 찾습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 평균 이상 급여를 받는 직원 찾기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또 다른 흔한 질문은 평균 급여보다 높은 급여를 받는 직원을 찾는 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" name, salary\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" employees\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WHERE\"\n        }), \" salary > (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"AVG\"\n        }), \"(salary) \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" employees);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"이 쿼리는 각 직원의 급여를 평균 급여와 비교하여 평균 이상을 받는 사람을 찾습니다.\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"## 3. 직원 계층\"\n        }), \"\\n\\n아마존은 직원 계층을 찾는 것과 같은 계층적 데이터에 관한 질문을 할 수 있습니다. 재귀 CTE를 사용하여 직원 계층을 찾을 수 있습니다:\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"원들의EmployeeHierarchy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 결과와 같이 전체 직원 계층을 가져오는 재귀 CTE입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| id | name    | manager_id |\\n|----|---------|------------|\\n| 1  | John    | NULL       |\\n| 2  | Alice   | 1          |\\n| 3  | Bob     | 1          |\\n| 4  | Carol   | 2          |\\n| 5  | Dave    | 2          |\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 부서별 최고 급여\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 부서별 최고 급여를 찾는 것은 또 다른 흥미로운 문제입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" department, \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"MAX\"\n        }), \"(salary) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" HighestSalary\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" employees\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"GROUP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" department;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-plaintext\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"+-------------+---------------+\\n| department | HighestSalary |\\n+-------------+---------------+\\n| Engineering | 90000 |\\n| HR | 80000 |\\n| Sales | 75000 |\\n+-------------+---------------+\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 부서별로 직원을 그룹화하고 각 부서의 최고 급여를 찾습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. 연속 결근자 식별\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"출석 기록에 대해 연이어 결근한 직원을 식별해야 할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WITH ConsecutiveAbsences AS (\\nSELECT id,\\ndate,\\nLAG(date, 1) OVER (PARTITION BY id ORDER BY date) AS previous_date\\nFROM attendance\\nWHERE status = 'absent'\\n)\\nSELECT id, date\\nFROM ConsecutiveAbsences\\nWHERE DATEDIFF(date, previous_date) = 1;\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Result:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| id | date       |\\n|----|------------|\\n| 3  | 2024-05-10 |\\n| 3  | 2024-05-11 |\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This query finds employees who were absent on consecutive days by comparing each absence date with the previous one.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. 러닝 토탈 계산하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아마존 면접에는 러닝 토탈을 계산하는 질문이 포함될 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"date\"\n        }), \", sales,\\n       \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"SUM\"\n        }), \"(sales) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"OVER\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"ORDER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"date\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" running_total\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" sales;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"------------+-------+--------------+\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" 날짜       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" 매출  \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" 누적합계      \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"------------+-------+--------------+\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-05\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-01\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"          \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-05\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-02\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"300\"\n        }), \"          \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-05\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"-03\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"150\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"450\"\n        }), \"          \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"------------+-------+--------------+\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 시간에 따른 매출의 누적 합계를 계산합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. 구매를 한 번도 하지 않은 고객\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구매를 한 번도 하지 않은 고객을 찾기 위해 LEFT JOIN을 사용할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"바로 보라 카드모래 예술로나와 함께합니다! ✨\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" c.id, c.name\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" customers c\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"LEFT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"JOIN\"\n        }), \" orders o \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"ON\"\n        }), \" c.id \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" o.customer_id\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WHERE\"\n        }), \" o.id \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IS\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"NULL\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"----+--------+\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" id \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" name   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"----+--------+\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Dave   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"+\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"----+--------+\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 주문 내역이 하나도 없는 고객을 찾아냅니다. 🌟\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"8. 중복 레코드 식별\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신에게 테이블에서 중복 레코드를 식별하라는 요청을 받을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" name, email, \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"COUNT\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"*\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" users\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"GROUP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" name, email\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"HAVING\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"COUNT\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"*\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 중복된 이름과 이메일 조합을 가진 사용자를 식별합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"9. 카테고리별 상위 N개 레코드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"카테고리별 상위 N개 레코드를 찾는 것은 일반적인 고급 SQL 질문입니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WITH\"\n        }), \" RankedSales \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" product, category, sales,\\n           \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"ROW_NUMBER\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"OVER\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"PARTITION\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" category \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"ORDER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" sales \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"DESC\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" rank\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" sales\\n)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" product, category, sales\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" RankedSales\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WHERE\"\n        }), \" rank \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"<=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Result:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" product \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" category    \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" sales \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"---------|-------------|-------|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" A       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Electronics \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" B       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Electronics \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"800\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" C       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Electronics \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"600\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" D       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Furniture   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"900\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" E       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Furniture   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"850\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" F       \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" Furniture   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"800\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"|\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This query finds the top 3 products in each category based on sales.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"10. 월간 성장률\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"월간 성장률을 계산하려면 윈도우 함수를 사용해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" month, sales,\\n       sales - \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"LAG\"\n        }), \"(sales, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"OVER\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ORDER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BY\"\n        }), \" month) \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \" growth\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" monthly_sales;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"+-------+-------+--------+\\n| 월 | 매출 | 성장률 |\\n+-------+-------+--------+\\n| 1월 | 1000 | NULL |\\n| 2월 | 1100 | 100 |\\n| 3월 | 1200 | 100 |\\n+-------+-------+--------+\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 쿼리는 매출의 월간 성장률을 계산합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아마존 면접 준비에는 고급 SQL 개념을 이해하고 복잡한 비즈니스 문제를 해결할 수 있는 능력이 필요합니다. 이러한 SQL 코딩 문제를 숙달하고 실제 데이터로 연습함으로써, 면접관들을 감명시키고 아마존에서 꿈에 그리던 직장을 확보할 수 있을 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SQL 기초\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 시간과 관심에 감사드립니다! 🚀\\n더 많은 콘텐츠는 SQL 기초에서 찾아볼 수 있어요! 💫\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}