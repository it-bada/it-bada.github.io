{"pageProps":{"post":{"title":"아마존 면접에는 SQL 코딩 질문이 10개 있어요","description":"","date":"2024-05-18 22:59","slug":"2024-05-18-10SQLCodingQuestionsinAmazonInterviews","content":"\nData Analyst나 Data Scientist로 취직하고 싶다면 SQL에서의 강력한 기술력이 필요합니다. 인터뷰에서는 후보자들의 문제 해결 능력과 SQL 능력을 시험하는 복잡한 SQL 코딩 문제가 종종 제시됩니다. 이 글에서는 MySQL을 사용하여 아마존의 인터뷰에서 자주 나오는 일반적인 SQL 질문들을 코드 예제와 결과와 함께 살펴보겠습니다.\n\n![image](/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png)\n\n## 1. 두 번째로 높은 급여 찾기\n\n직원 테이블에서 두 번째로 높은 급여를 찾는 것은 자주 나오는 질문 중 하나입니다. 서브쿼리를 사용하여 다음과 같이 수행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n**질문:**\n\n```sql\nSELECT MAX(salary) AS SecondHighestSalary\nFROM employees\nWHERE salary < (SELECT MAX(salary) FROM employees);\n```\n\n**결과:**\n\n```sql\n| SecondHighestSalary|\n|--------------------|\n| 70000              |\n```\n\n이 쿼리는 결과 세트에서 최대 급여를 제외하여 두 번째로 높은 급여를 찾습니다.\n\n<div class=\"content-ad\"></div>\n\n## 2. 평균 이상 급여를 받는 직원 찾기\n\n또 다른 흔한 질문은 평균 급여보다 높은 급여를 받는 직원을 찾는 것입니다.\n\n```js\nSELECT name, salary\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees);\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```md\n이 쿼리는 각 직원의 급여를 평균 급여와 비교하여 평균 이상을 받는 사람을 찾습니다.\n\n## 3. 직원 계층\n\n아마존은 직원 계층을 찾는 것과 같은 계층적 데이터에 관한 질문을 할 수 있습니다. 재귀 CTE를 사용하여 직원 계층을 찾을 수 있습니다:\n```\n\n<div class=\"content-ad\"></div>\n\n\n원들의EmployeeHierarchy\n\n아래 결과와 같이 전체 직원 계층을 가져오는 재귀 CTE입니다.\n\n| id | name    | manager_id |\n|----|---------|------------|\n| 1  | John    | NULL       |\n| 2  | Alice   | 1          |\n| 3  | Bob     | 1          |\n| 4  | Carol   | 2          |\n| 5  | Dave    | 2          |\n\n\n<div class=\"content-ad\"></div>\n\n## 4. 부서별 최고 급여\n\n각 부서별 최고 급여를 찾는 것은 또 다른 흥미로운 문제입니다:\n\n```sql\nSELECT department, MAX(salary) AS HighestSalary\nFROM employees\nGROUP BY department;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```plaintext\n\n```\n\n+-------------+---------------+\n| department | HighestSalary |\n+-------------+---------------+\n| Engineering | 90000 |\n| HR | 80000 |\n| Sales | 75000 |\n+-------------+---------------+\n\n\n\n이 쿼리는 부서별로 직원을 그룹화하고 각 부서의 최고 급여를 찾습니다.\n\n## 5. 연속 결근자 식별\n\n출석 기록에 대해 연이어 결근한 직원을 식별해야 할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\nWITH ConsecutiveAbsences AS (\n    SELECT id,\n           date,\n           LAG(date, 1) OVER (PARTITION BY id ORDER BY date) AS previous_date\n    FROM attendance\n    WHERE status = 'absent'\n)\nSELECT id, date\nFROM ConsecutiveAbsences\nWHERE DATEDIFF(date, previous_date) = 1;\n\n\nResult:\n\n\n| id | date       |\n|----|------------|\n| 3  | 2024-05-10 |\n| 3  | 2024-05-11 |\n\n\nThis query finds employees who were absent on consecutive days by comparing each absence date with the previous one.\n\n<div class=\"content-ad\"></div>\n\n## 6. 러닝 토탈 계산하기\n\n아마존 면접에는 러닝 토탈을 계산하는 질문이 포함될 수 있어요:\n\n```sql\nSELECT date, sales,\n       SUM(sales) OVER (ORDER BY date) AS running_total\nFROM sales;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n```sql\n+------------+-------+--------------+\n| 날짜       | 매출  | 누적합계      |\n+------------+-------+--------------+\n| 2024-05-01 | 100   | 100          |\n| 2024-05-02 | 200   | 300          |\n| 2024-05-03 | 150   | 450          |\n+------------+-------+--------------+\n```\n\n이 쿼리는 시간에 따른 매출의 누적 합계를 계산합니다.\n\n## 7. 구매를 한 번도 하지 않은 고객\n\n구매를 한 번도 하지 않은 고객을 찾기 위해 LEFT JOIN을 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n바로 보라 카드모래 예술로나와 함께합니다! ✨\n\n```sql\nSELECT c.id, c.name\nFROM customers c\nLEFT JOIN orders o ON c.id = o.customer_id\nWHERE o.id IS NULL;\n```\n\n결과:\n\n```sql\n+----+--------+\n| id | name   |\n+----+--------+\n| 4  | Dave   |\n+----+--------+\n```\n\n이 쿼리는 주문 내역이 하나도 없는 고객을 찾아냅니다. 🌟\n\n<div class=\"content-ad\"></div>\n\n## 8. 중복 레코드 식별\n\n당신에게 테이블에서 중복 레코드를 식별하라는 요청을 받을 수 있습니다:\n\n```sql\nSELECT name, email, COUNT(*)\nFROM users\nGROUP BY name, email\nHAVING COUNT(*) > 1;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n이 쿼리는 중복된 이름과 이메일 조합을 가진 사용자를 식별합니다.\n\n## 9. 카테고리별 상위 N개 레코드\n\n카테고리별 상위 N개 레코드를 찾는 것은 일반적인 고급 SQL 질문입니다:\n\n<div class=\"content-ad\"></div>\n\n```sql\nWITH RankedSales AS (\n    SELECT product, category, sales,\n           ROW_NUMBER() OVER (PARTITION BY category ORDER BY sales DESC) AS rank\n    FROM sales\n)\nSELECT product, category, sales\nFROM RankedSales\nWHERE rank <= 3;\n```\n\nResult:\n\n```sql\n| product | category    | sales |\n|---------|-------------|-------|\n| A       | Electronics | 1000  |\n| B       | Electronics | 800   |\n| C       | Electronics | 600   |\n| D       | Furniture   | 900   |\n| E       | Furniture   | 850   |\n| F       | Furniture   | 800   |\n```\n\nThis query finds the top 3 products in each category based on sales.\n\n<div class=\"content-ad\"></div>\n\n## 10. 월간 성장률\n\n월간 성장률을 계산하려면 윈도우 함수를 사용해야 합니다:\n\n```js\nSELECT month, sales,\n       sales - LAG(sales, 1) OVER (ORDER BY month) AS growth\nFROM monthly_sales;\n```\n\n결과:\n\n<div class=\"content-ad\"></div>\n\n+-------+-------+--------+\n| 월 | 매출 | 성장률 |\n+-------+-------+--------+\n| 1월 | 1000 | NULL |\n| 2월 | 1100 | 100 |\n| 3월 | 1200 | 100 |\n+-------+-------+--------+\n\n이 쿼리는 매출의 월간 성장률을 계산합니다.\n\n## 결론\n\n아마존 면접 준비에는 고급 SQL 개념을 이해하고 복잡한 비즈니스 문제를 해결할 수 있는 능력이 필요합니다. 이러한 SQL 코딩 문제를 숙달하고 실제 데이터로 연습함으로써, 면접관들을 감명시키고 아마존에서 꿈에 그리던 직장을 확보할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# SQL 기초\n\n당신의 시간과 관심에 감사드립니다! 🚀\n더 많은 콘텐츠는 SQL 기초에서 찾아볼 수 있어요! 💫\n\n\n\n\n","ogImage":{"url":"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png"},"coverImage":"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Data Analyst나 Data Scientist로 취직하고 싶다면 SQL에서의 강력한 기술력이 필요합니다. 인터뷰에서는 후보자들의 문제 해결 능력과 SQL 능력을 시험하는 복잡한 SQL 코딩 문제가 종종 제시됩니다. 이 글에서는 MySQL을 사용하여 아마존의 인터뷰에서 자주 나오는 일반적인 SQL 질문들을 코드 예제와 결과와 함께 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-10SQLCodingQuestionsinAmazonInterviews_0.png\" alt=\"image\"></p>\n<h2>1. 두 번째로 높은 급여 찾기</h2>\n<p>직원 테이블에서 두 번째로 높은 급여를 찾는 것은 자주 나오는 질문 중 하나입니다. 서브쿼리를 사용하여 다음과 같이 수행할 수 있습니다:</p>\n<p><strong>질문:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MAX</span>(salary) <span class=\"hljs-keyword\">AS</span> SecondHighestSalary\n<span class=\"hljs-keyword\">FROM</span> employees\n<span class=\"hljs-keyword\">WHERE</span> salary <span class=\"hljs-operator\">&#x3C;</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MAX</span>(salary) <span class=\"hljs-keyword\">FROM</span> employees);\n</code></pre>\n<p><strong>결과:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-operator\">|</span> SecondHighestSalary<span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span><span class=\"hljs-comment\">--------------------|</span>\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">70000</span>              <span class=\"hljs-operator\">|</span>\n</code></pre>\n<p>이 쿼리는 결과 세트에서 최대 급여를 제외하여 두 번째로 높은 급여를 찾습니다.</p>\n<h2>2. 평균 이상 급여를 받는 직원 찾기</h2>\n<p>또 다른 흔한 질문은 평균 급여보다 높은 급여를 받는 직원을 찾는 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">SELECT</span> name, salary\n<span class=\"hljs-variable constant_\">FROM</span> employees\n<span class=\"hljs-variable constant_\">WHERE</span> salary > (<span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">AVG</span>(salary) <span class=\"hljs-variable constant_\">FROM</span> employees);\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-md\">이 쿼리는 각 직원의 급여를 평균 급여와 비교하여 평균 이상을 받는 사람을 찾습니다.\n\n<span class=\"hljs-section\">## 3. 직원 계층</span>\n\n아마존은 직원 계층을 찾는 것과 같은 계층적 데이터에 관한 질문을 할 수 있습니다. 재귀 CTE를 사용하여 직원 계층을 찾을 수 있습니다:\n</code></pre>\n<p>원들의EmployeeHierarchy</p>\n<p>아래 결과와 같이 전체 직원 계층을 가져오는 재귀 CTE입니다.</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>manager_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>John</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Alice</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Carol</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Dave</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h2>4. 부서별 최고 급여</h2>\n<p>각 부서별 최고 급여를 찾는 것은 또 다른 흥미로운 문제입니다:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> department, <span class=\"hljs-built_in\">MAX</span>(salary) <span class=\"hljs-keyword\">AS</span> HighestSalary\n<span class=\"hljs-keyword\">FROM</span> employees\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> department;\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-plaintext\"></code></pre>\n<p>+-------------+---------------+\n| department | HighestSalary |\n+-------------+---------------+\n| Engineering | 90000 |\n| HR | 80000 |\n| Sales | 75000 |\n+-------------+---------------+</p>\n<p>이 쿼리는 부서별로 직원을 그룹화하고 각 부서의 최고 급여를 찾습니다.</p>\n<h2>5. 연속 결근자 식별</h2>\n<p>출석 기록에 대해 연이어 결근한 직원을 식별해야 할 수 있습니다.</p>\n<p>WITH ConsecutiveAbsences AS (\nSELECT id,\ndate,\nLAG(date, 1) OVER (PARTITION BY id ORDER BY date) AS previous_date\nFROM attendance\nWHERE status = 'absent'\n)\nSELECT id, date\nFROM ConsecutiveAbsences\nWHERE DATEDIFF(date, previous_date) = 1;</p>\n<p>Result:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2024-05-10</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2024-05-11</td>\n</tr>\n</tbody>\n</table>\n<p>This query finds employees who were absent on consecutive days by comparing each absence date with the previous one.</p>\n<h2>6. 러닝 토탈 계산하기</h2>\n<p>아마존 면접에는 러닝 토탈을 계산하는 질문이 포함될 수 있어요:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-type\">date</span>, sales,\n       <span class=\"hljs-built_in\">SUM</span>(sales) <span class=\"hljs-keyword\">OVER</span> (<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-type\">date</span>) <span class=\"hljs-keyword\">AS</span> running_total\n<span class=\"hljs-keyword\">FROM</span> sales;\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+-------+--------------+</span>\n<span class=\"hljs-operator\">|</span> 날짜       <span class=\"hljs-operator\">|</span> 매출  <span class=\"hljs-operator\">|</span> 누적합계      <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+-------+--------------+</span>\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-01</span> <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">100</span>   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">100</span>          <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-02</span> <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">200</span>   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">300</span>          <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-03</span> <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">150</span>   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">450</span>          <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+-------+--------------+</span>\n</code></pre>\n<p>이 쿼리는 시간에 따른 매출의 누적 합계를 계산합니다.</p>\n<h2>7. 구매를 한 번도 하지 않은 고객</h2>\n<p>구매를 한 번도 하지 않은 고객을 찾기 위해 LEFT JOIN을 사용할 수 있습니다:</p>\n<p>바로 보라 카드모래 예술로나와 함께합니다! ✨</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> c.id, c.name\n<span class=\"hljs-keyword\">FROM</span> customers c\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> orders o <span class=\"hljs-keyword\">ON</span> c.id <span class=\"hljs-operator\">=</span> o.customer_id\n<span class=\"hljs-keyword\">WHERE</span> o.id <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NULL</span>;\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+--------+</span>\n<span class=\"hljs-operator\">|</span> id <span class=\"hljs-operator\">|</span> name   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+--------+</span>\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">4</span>  <span class=\"hljs-operator\">|</span> Dave   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+--------+</span>\n</code></pre>\n<p>이 쿼리는 주문 내역이 하나도 없는 고객을 찾아냅니다. 🌟</p>\n<h2>8. 중복 레코드 식별</h2>\n<p>당신에게 테이블에서 중복 레코드를 식별하라는 요청을 받을 수 있습니다:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> name, email, <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>)\n<span class=\"hljs-keyword\">FROM</span> users\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> name, email\n<span class=\"hljs-keyword\">HAVING</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p>결과:</p>\n<p>이 쿼리는 중복된 이름과 이메일 조합을 가진 사용자를 식별합니다.</p>\n<h2>9. 카테고리별 상위 N개 레코드</h2>\n<p>카테고리별 상위 N개 레코드를 찾는 것은 일반적인 고급 SQL 질문입니다:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">WITH</span> RankedSales <span class=\"hljs-keyword\">AS</span> (\n    <span class=\"hljs-keyword\">SELECT</span> product, category, sales,\n           <span class=\"hljs-built_in\">ROW_NUMBER</span>() <span class=\"hljs-keyword\">OVER</span> (<span class=\"hljs-keyword\">PARTITION</span> <span class=\"hljs-keyword\">BY</span> category <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> sales <span class=\"hljs-keyword\">DESC</span>) <span class=\"hljs-keyword\">AS</span> rank\n    <span class=\"hljs-keyword\">FROM</span> sales\n)\n<span class=\"hljs-keyword\">SELECT</span> product, category, sales\n<span class=\"hljs-keyword\">FROM</span> RankedSales\n<span class=\"hljs-keyword\">WHERE</span> rank <span class=\"hljs-operator\">&#x3C;=</span> <span class=\"hljs-number\">3</span>;\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-operator\">|</span> product <span class=\"hljs-operator\">|</span> category    <span class=\"hljs-operator\">|</span> sales <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span><span class=\"hljs-comment\">---------|-------------|-------|</span>\n<span class=\"hljs-operator\">|</span> A       <span class=\"hljs-operator\">|</span> Electronics <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">1000</span>  <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> B       <span class=\"hljs-operator\">|</span> Electronics <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">800</span>   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> C       <span class=\"hljs-operator\">|</span> Electronics <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">600</span>   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> D       <span class=\"hljs-operator\">|</span> Furniture   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">900</span>   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> E       <span class=\"hljs-operator\">|</span> Furniture   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">850</span>   <span class=\"hljs-operator\">|</span>\n<span class=\"hljs-operator\">|</span> F       <span class=\"hljs-operator\">|</span> Furniture   <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">800</span>   <span class=\"hljs-operator\">|</span>\n</code></pre>\n<p>This query finds the top 3 products in each category based on sales.</p>\n<h2>10. 월간 성장률</h2>\n<p>월간 성장률을 계산하려면 윈도우 함수를 사용해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">SELECT</span> month, sales,\n       sales - <span class=\"hljs-title function_\">LAG</span>(sales, <span class=\"hljs-number\">1</span>) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> month) <span class=\"hljs-variable constant_\">AS</span> growth\n<span class=\"hljs-variable constant_\">FROM</span> monthly_sales;\n</code></pre>\n<p>결과:</p>\n<p>+-------+-------+--------+\n| 월 | 매출 | 성장률 |\n+-------+-------+--------+\n| 1월 | 1000 | NULL |\n| 2월 | 1100 | 100 |\n| 3월 | 1200 | 100 |\n+-------+-------+--------+</p>\n<p>이 쿼리는 매출의 월간 성장률을 계산합니다.</p>\n<h2>결론</h2>\n<p>아마존 면접 준비에는 고급 SQL 개념을 이해하고 복잡한 비즈니스 문제를 해결할 수 있는 능력이 필요합니다. 이러한 SQL 코딩 문제를 숙달하고 실제 데이터로 연습함으로써, 면접관들을 감명시키고 아마존에서 꿈에 그리던 직장을 확보할 수 있을 것입니다.</p>\n<h1>SQL 기초</h1>\n<p>당신의 시간과 관심에 감사드립니다! 🚀\n더 많은 콘텐츠는 SQL 기초에서 찾아볼 수 있어요! 💫</p>\n</body>\n</html>\n"},"__N_SSG":true}